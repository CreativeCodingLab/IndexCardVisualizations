// Generated by CoffeeScript 1.10.0
(function() {
  var App;

  App = (function() {
    var addButtons, base_url, data, dispatch, doSearch, existing_oboe, keep_fries_keys, keep_match_keys;

    function App() {}

    base_url = "//bostock.evl.uic.edu:8080/matches/score-above-zero/participant-b/";

    dispatch = d3.dispatch("newSearch", "dataUpdated");

    App.prototype.dispatch = dispatch;

    App.prototype.launch = function() {
      var container;
      return container = d3.select("body").append("main").append("div").classed("container", true).style({
        "padding-top": "10px"
      }).call(addButtons);
    };

    addButtons = function(container) {
      var button_data;
      button_data = ["Uniprot:P27361", "Uniprot:P05412", "Uniprot:Q05397", "Uniprot:P00533"];
      container.append("div").classed("row", true).append("div").classed("col-xs-12", true).append("div").classed("panel panel-default", true).append("div").classed("panel-body", true).append("div").classed("btn-group-vertical", true).attr({
        "data-toggle": "buttons"
      }).call(function(div) {
        var label;
        label = div.selectAll("label").data(button_data);
        label.enter().append("label").classed("btn btn-primary", true).text(function(d) {
          return "Search for Participant B: " + d;
        }).on("click", function(d) {
          return doSearch("" + base_url + d);
        });
        return label.append("input").attr({
          type: "radio",
          name: "data"
        });
      });
      return container.selectAll("label").each(function(d, i) {
        if (i === 0) {
          d3.select(this).node().click();
        }
        if (d === "Uniprot:P27361") {
          d3.select(this).select("a").append("span").text(" (includes potentialConflict)");
        }
        if (d === "Uniprot:P00533") {
          return d3.select(this).select("a").append("span").text(" (demonstrates scaling issues)");
        }
      });
    };

    data = {
      fries: [],
      pc: [],
      links: []
    };

    existing_oboe = null;

    keep_fries_keys = ["_id", "_filename", "_participant_a_ids", "_participant_b_ids"];

    keep_match_keys = ["deltaFeature", "potentialConflict", "participantA", "score"];

    doSearch = function(url) {
      dispatch.newSearch(url);
      if (existing_oboe != null) {
        existing_oboe.abort();
      }
      return existing_oboe = oboe(url).node("!.*", function(card) {
        var new_card, source_fries, source_index;
        source_fries = new_card = {};
        keep_fries_keys.forEach(function(key) {
          return new_card[key] = card[key];
        });
        source_index = bisect(data.fries, new_card);
        data.fries.splice(source_index, 0, new_card);
        card.match.forEach(function(match) {
          var match_data, target_index, target_pc;
          if (match.score === 0) {
            return;
          }
          target_index = _.findIndex(data.pc, function(d) {
            return d._id === match._id;
          });
          if (target_index === -1) {
            target_pc = new_card = {
              _id: match._id
            };
            target_index = bisect(data.pc, new_card);
            data.pc.splice(target_index, 0, new_card);
          } else {
            target_pc = data.pc[target_index];
          }
          match_data = {};
          keep_match_keys.forEach(function(key) {
            return match_data[key] = match[key];
          });
          return data.links.push({
            source: source_fries,
            target: target_pc,
            match_data: match_data
          });
        });
        return dispatch.dataUpdated(data);
      });
    };

    return App;

  })();

  window.onload = function() {
    var app;
    app = new App();
    app.dispatch.on("dataUpdated", function(d) {
      debugger;
      return console.log(d);
    });
    return app.launch();
  };

}).call(this);
