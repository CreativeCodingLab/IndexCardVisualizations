// Generated by CoffeeScript 1.7.1
(function() {
  var addButtons, bisect, cell_padding, cell_spacing, dispatch, doSearch, existing_oboe, fries, keep_fries_keys, keep_match_keys, launch, links, matrix, pc, processCard, translate, updateAll, x, y;

  dispatch = d3.dispatch("newSearch", "dataUpdated");

  window.onload = launch = function() {
    var container, matrix_panel, panels, vis_row, _matrix;
    container = d3.select("body").append("main").append("div").classed("container", true).style({
      "padding-top": "10px"
    }).call(addButtons);
    _matrix = matrix();
    dispatch.on('newSearch', function(d) {
      return console.log(d);
    });
    vis_row = container.append("div").classed("row", true);
    matrix_panel = vis_row.append("div").classed("col-xs-6", true).append("div").classed("panel panel-default", true).append("div").classed("panel-body", true).call(_matrix.initialize);
    panels = [
      {
        label: "Match Data",
        klass: "match-data"
      }, {
        label: "FRIES Data",
        klass: "fries-data"
      }, {
        label: "PC Data",
        klass: "pc-data"
      }
    ];
    return vis_row.append("div").classed("col-xs-6", true).selectAll(".row").data(panels).enter().append("div").classed("row", true).call(function(div) {
      return div.append("h2").text(function(d) {
        return d.label;
      });
    }).append("div").attr("class", function(d) {
      return d.klass;
    }).classed("panel panel-default", true).append("div").classed("panel-body", true).call(function(div) {
      return div.append("pre").classed("text", true).style({
        height: "250px",
        overflow: "scroll"
      });
    });
  };

  addButtons = function(container) {
    var base_url, button_data;
    base_url = "//bostock.evl.uic.edu:8080/matches/score-above-zero/participant-b/";
    button_data = ["Uniprot:P27361", "Uniprot:P05412", "Uniprot:Q05397", "Uniprot:P00533"];
    container.append("div").classed("row", true).append("div").classed("col-xs-12", true).append("div").classed("panel panel-default", true).append("div").classed("panel-body", true).append("div").classed("btn-group-vertical", true).attr({
      "data-toggle": "buttons"
    }).call(function(div) {
      var label;
      label = div.selectAll("label").data(button_data);
      label.enter().append("label").classed("btn btn-primary", true).text(function(d) {
        return "Search for Participant B: " + d;
      }).on("click", function(d) {
        return doSearch("" + base_url + d);
      });
      return label.append("input").attr({
        type: "radio",
        name: "data"
      });
    });
    return container.selectAll("label").each(function(d, i) {
      if (i === 0) {
        d3.select(this).node().click();
      }
      if (d === "Uniprot:P27361") {
        d3.select(this).select("a").append("span").text(" (includes potentialConflict)");
      }
      if (d === "Uniprot:P00533") {
        return d3.select(this).select("a").append("span").text(" (demonstrates scaling issues)");
      }
    });
  };

  matrix = function() {
    var cell_size, height, margin, my, n, width;
    margin = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
    cell_size = 10;
    n = 1e3;
    width = height = cell_size * n;
    my = function(div) {};
    my.initialize = function(div) {
      var columns_container, rows_container, svg;
      svg = div.append("svg").attr({
        width: "100%",
        height: "500px"
      });
      svg.append("rect").style({
        fill: "none",
        stroke: "black"
      }).attr({
        width: "100%",
        height: "100%"
      });
      this.matrix_container = svg.append("g").attr({
        "transform": translate(margin.left, margin.top)
      });
      this.matrix_container.append("rect").attr({
        width: "100%",
        height: "100%"
      }).style({
        fill: "#eee"
      });
      rows_container = this.matrix_container.append("g").classed("rows", true);
      return columns_container = this.matrix_container.append("g").classed("columns", true);
    };
    my.clearRows = function() {
      return this.matrix_container.selectAll(".row").remove();
    };
    return my;
  };

  translate = function(x, y) {
    return "translate (" + x + "," + y + ")";
  };

  fries = [];

  pc = [];

  links = [];

  bisect = d3.bisector(function(d) {
    return d._id;
  }).left;

  keep_fries_keys = ["_id", "_filename", "_participant_a_ids", "_participant_b_ids"];

  keep_match_keys = ["deltaFeature", "potentialConflict", "participantA", "score"];

  processCard = function(card) {
    var new_card, source_fries, source_index;
    source_fries = new_card = {};
    keep_fries_keys.forEach(function(key) {
      return new_card[key] = card[key];
    });
    source_index = bisect(fries, new_card);
    fries.splice(source_index, 0, new_card);
    card.match.forEach(function(match) {
      var match_data, target_index, target_pc;
      if (match.score === 0) {
        return;
      }
      target_index = _.findIndex(pc, function(d) {
        return d._id === match._id;
      });
      if (target_index === -1) {
        target_pc = new_card = {
          _id: match._id
        };
        target_index = bisect(pc, new_card);
        pc.splice(target_index, 0, new_card);
      } else {
        target_pc = pc[target_index];
      }
      match_data = {};
      keep_match_keys.forEach(function(key) {
        return match_data[key] = match[key];
      });
      return links.push({
        source: source_fries,
        target: target_pc,
        match_data: match_data
      });
    });
    return updateAll();
  };

  existing_oboe = null;

  doSearch = function(url) {
    fries = [];
    pc = [];
    links = [];
    dispatch.newSearch(url);
    if (existing_oboe != null) {
      existing_oboe.abort();
    }
    return existing_oboe = oboe(url).node("!.*", processCard);
  };

  x = d3.scale.ordinal();

  y = d3.scale.ordinal();

  cell_spacing = 0;

  cell_padding = 0;

  updateAll = function() {
    var cell_size;
    cell_size = parseInt(svg.style("width")) / pc.length;
    cell_padding = cell_size > 3 ? 2 : 0;
    y.domain(d3.range(fries.length)).rangeBands([0, cell_size * fries.length], cell_spacing);
    x.domain(d3.range(pc.length)).rangeBands([0, cell_size * pc.length], cell_spacing);
    svg.style({
      height: cell_size * fries.length
    });
    updateRows(fries);
    return updateColumns(pc);
  };

}).call(this);
