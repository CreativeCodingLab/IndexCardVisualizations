// Generated by CoffeeScript 1.7.1
(function() {
  var bisect, fries, fries_list, go, height, i, keep_fries_keys, keep_match_keys, links, links_list, lists, main, pc, pc_list, updateAll, updateFries, updateLinks, updatePc, url, width, _ref;

  _ref = [window.innerWidth, window.innerHeight], width = _ref[0], height = _ref[1];

  main = d3.select("body").append("main").append("div").classed("container", true);

  lists = main.append("div").classed("row", true);

  url = "//bostock.evl.uic.edu:8080/matches/score-above-zero-stream.json";

  lists.selectAll("div").data(["fries_cards", "pc_cards", "links"]).enter().append("div").attr("class", function(d) {
    return d;
  }).classed("col-xs-4", true).call(function(div) {
    div.append("h1").text(function(d) {
      return d;
    });
    return div.append("ul");
  });

  fries_list = lists.select(".fries_cards").select("ul");

  pc_list = lists.select(".pc_cards").select("ul");

  links_list = lists.select(".links").select("ul");

  fries = [];

  pc = [];

  links = [];

  bisect = d3.bisector(function(d) {
    return d._id;
  }).left;

  keep_fries_keys = ["_id", "_filename", "_participant_a_ids", "_participant_b_ids"];

  keep_match_keys = ["deltaFeature", "potentialConflict", "participantA", "score"];

  i = 0;

  go = function() {
    return oboe(url).node("!.*", function(card) {
      var index, new_card, source_fries;
      source_fries = new_card = {};
      keep_fries_keys.forEach(function(key) {
        return new_card[key] = card[key];
      });
      index = bisect(fries, new_card);
      fries.splice(index, 0, new_card);
      card.match.forEach(function(match) {
        var found, link, match_data, target_pc;
        if (match.score === 0) {
          return;
        }
        target_pc = found = _.find(pc, function(d) {
          return d._id === match._id;
        });
        if (found == null) {
          target_pc = new_card = {
            _id: match._id
          };
          index = bisect(pc, new_card);
          pc.splice(index, 0, new_card);
        }
        match_data = {};
        keep_match_keys.forEach(function(key) {
          return match_data[key] = match[key];
        });
        link = {
          source: source_fries,
          target: target_pc,
          match_data: match_data
        };
        return links.push(link);
      });
      return updateAll();
    });
  };

  window.onload = go;

  updateAll = function() {
    updateLinks(links);
    updatePc(pc);
    return updateFries(fries);
  };

  updateAll = _.throttle(updateAll, 500);

  updateLinks = function(links) {
    var items;
    items = links_list.selectAll("li").data(links);
    return items.enter().append("li").text(function(d) {
      return JSON.stringify(d);
    }).style({
      "font-size": "0.5em"
    });
  };

  updatePc = function(pc) {
    var items;
    items = pc_list.selectAll("li").data(pc);
    return items.enter().append("li").text(function(d) {
      return d._id;
    }).style({
      "font-size": "0.5em",
      opacity: 0
    }).style({
      opacity: 1
    });
  };

  updateFries = function(fries) {
    var items;
    items = fries_list.selectAll("li").data(fries);
    return items.enter().append("li").text(function(d) {
      return d._filename;
    }).style({
      "font-size": "0.5em",
      opacity: 0
    }).style({
      opacity: 1
    });
  };

}).call(this);
